{"ast":null,"code":"var _jsxFileName = \"/Users/dan/repos/weather-app/src/App.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"HelloWorld\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"City Name: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Weather:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Humidity:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\n\n//---END OF REACT STUFF---\\\\\n\n//Fetching OpenWeather API (Weather Data of Some Places)\n\nconst weatherAPIKey = \"391cbb4a58a8cc222403d449bb858880\";\nlet city = prompt(\"Please Provide the City that You Would Like the Weather To?\");\nlet finalCityName;\nconst queryURL = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${weatherAPIKey}`;\n// let savedJSON;\nlet tempF;\nlet errorInName = false;\nfetchData();\nasync function fetchData() {\n  try {\n    const response = await fetch(queryURL);\n    if (!response.ok) {\n      throw new Error(\"Invalid Location\");\n    }\n    const data = await response.json();\n    console.log(data);\n    city = data.name;\n    tempF = data.main.temp;\n    console.log(city);\n    console.log(tempF);\n  } catch (error) {\n    // fetchDefaultInfo();\n    console.error(`Error: ${error}`);\n  }\n}\n\n// async function fetchDefaultInfo() {\n//   const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${\"London\"}&appid=${weatherAPIKey}`);\n//   const data = await response.json();\n//   console.log(data);\n//   city = data.name;\n//   tempF = data.main.temp;\n// }\n\n// if (errorInName) {\n//   city = \"London\";\n// }\n// finalCityName = city;\n\n// if (errorInName) {\n//   city = \"London\";\n\n// }\n\n// fetch (queryURL)\n//   .then(response => {\n//       // savedJSON = response.json();\n//       return response.json();\n//     })\n//   .then(data => {\n\n//     console.log(`Weather in ${city} is ${data.main.temp}`);\n//     temp = data.main.temp;\n\n//   })\n//   .catch(error => {\n//     // errorInName = true;\n//     // return error;\n//     console.error(`Error: ${error}`);\n\n//   });\n\n// if (errorInName) {\n//   city = \"London\";\n// }\n\n//Getting Location of the User (Longitude and Latitude)\n\nconst options = {\n  enableHighAccuracy: true,\n  timeout: 5000,\n  maximumAge: 0\n};\nfunction success(pos) {\n  const crd = pos.coords;\n  console.log(`Your Current Location Is:`);\n  console.log(`Latitude: ${crd.latitude}`);\n  console.log(`Longitude: ${crd.longitude}`);\n  console.log(`More or Less: ${crd.accuracy} meters.`);\n\n  //Used to Get Longitude and letitude - Fix\n  // const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=YOUR_API_KEY`;\n}\nfunction error(err) {\n  console.warn(`ERROR: (${err.code}): ${err.message}`);\n}\nnavigator.geolocation.getCurrentPosition(success, error, options);\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","_jsxDEV","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","weatherAPIKey","city","prompt","finalCityName","queryURL","tempF","errorInName","fetchData","response","fetch","ok","Error","data","json","console","log","name","main","temp","error","options","enableHighAccuracy","timeout","maximumAge","success","pos","crd","coords","latitude","longitude","accuracy","err","warn","code","message","navigator","geolocation","getCurrentPosition","$RefreshReg$"],"sources":["/Users/dan/repos/weather-app/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nfunction App() {\n\n  return (\n    <div className = \"HelloWorld\">\n      <p>City Name: </p>\n      <p>Weather:</p>\n      <p>Humidity:</p>\n      <p></p>\n    </div>\n  );\n}\n\nexport default App;\n\n\n//---END OF REACT STUFF---\\\\\n\n//Fetching OpenWeather API (Weather Data of Some Places)\n\nconst weatherAPIKey = \"391cbb4a58a8cc222403d449bb858880\";\nlet city = prompt(\"Please Provide the City that You Would Like the Weather To?\");\nlet finalCityName;\nconst queryURL = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${weatherAPIKey}`;\n// let savedJSON;\nlet tempF;\nlet errorInName = false;\n\nfetchData();\n\n\nasync function fetchData () {\n  try {\n    const response = await fetch(queryURL);\n    if (!response.ok) {\n      throw new Error (\"Invalid Location\");\n    }\n    const data = await response.json();\n    \n    console.log(data);  \n    city = data.name;\n    tempF = data.main.temp;\n    console.log(city);\n    console.log(tempF);\n    \n  } catch (error) {\n    // fetchDefaultInfo();\n    console.error(`Error: ${error}`);\n  }\n}\n\n\n// async function fetchDefaultInfo() {\n//   const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${\"London\"}&appid=${weatherAPIKey}`);\n//   const data = await response.json();\n//   console.log(data);\n//   city = data.name;\n//   tempF = data.main.temp;\n// }\n\n\n// if (errorInName) {\n//   city = \"London\";\n// }\n// finalCityName = city;\n\n// if (errorInName) {\n//   city = \"London\";\n\n// }\n\n// fetch (queryURL)\n//   .then(response => {\n//       // savedJSON = response.json();\n//       return response.json();\n//     })\n//   .then(data => {\n    \n//     console.log(`Weather in ${city} is ${data.main.temp}`);\n//     temp = data.main.temp;\n\n//   })\n//   .catch(error => {\n//     // errorInName = true;\n//     // return error;\n//     console.error(`Error: ${error}`);\n    \n//   });\n\n\n// if (errorInName) {\n//   city = \"London\";\n// }\n\n//Getting Location of the User (Longitude and Latitude)\n\nconst options = {\n  enableHighAccuracy: true,\n  timeout: 5000,\n  maximumAge: 0,\n};\n\nfunction success(pos) {\n  const crd = pos.coords;\n\n  console.log(`Your Current Location Is:`);\n  console.log(`Latitude: ${crd.latitude}`);\n  console.log(`Longitude: ${crd.longitude}`);\n  console.log(`More or Less: ${crd.accuracy} meters.`);\n\n\n  //Used to Get Longitude and letitude - Fix\n  // const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=YOUR_API_KEY`;\n}\n\nfunction error (err) {\n  console.warn(`ERROR: (${err.code}): ${err.message}`);\n}\n\nnavigator.geolocation.getCurrentPosition(success, error, options);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}